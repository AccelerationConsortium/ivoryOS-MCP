stages:
  - check
  - build
  - upload

variables:
  PACKAGE_DIR: dist

check_version_change:
  stage: check
  image: python:3.10
  script:
    - apt-get update && apt-get install -y git
    - git fetch origin main
    - OLD_VERSION=$(git show origin/main:pyproject.toml | grep '^version' | cut -d '"' -f2)
    - NEW_VERSION=$(grep '^version' pyproject.toml | cut -d '"' -f2)
    - 'echo Old version: $OLD_VERSION'
    - 'echo New version: $NEW_VERSION'
    - |
      echo "Old version: $OLD_VERSION"
      echo "New version: $NEW_VERSION"
      if [ "$OLD_VERSION" = "$NEW_VERSION" ]; then
        echo "VERSION_CHANGED=false" > version.env
      else
        echo "VERSION_CHANGED=true" > version.env
      fi
  artifacts:
    reports:
      dotenv: version.env
  rules:
    - changes:
        - pyproject.toml

build_package:
  stage: build
  image: python:3.10
  script:
    - pip install build
    - python -m build
  artifacts:
    paths:
      - dist/
  rules:
    - if: '$VERSION_CHANGED == "true"'

upload_to_pypi:
  stage: upload
  image: python:3.10
  script:
    - pip install twine
    - twine upload dist/*
  rules:
    - if: '$VERSION_CHANGED == "true"'
 
